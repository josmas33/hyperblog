APUNTES DEL CURSO GIT Y GUTHUB

git status
                        git add <file>
                        git add .
                        commit -m "descripcion o mensaje del commit"
                        git rm <optional --cached> <file> elimina los cambios del file
                        git log <file>
                        git show <file>
                        git dif <commit antiguo> <commit nuevo> diferencias de los commit
                        git reset <commit> --hard #cambio duro con todo totalmente
                        git reset <commit> --soft #cambio suave manteniendo los cambios que estan en staggin
                        git log --stat nos permite mostrar a detalle el log de los cambios
                        
                        git checkout <commit o branch> <optional file>
                        
                        git reset HEAD #lo único que haremos será mover estos cambios de Staging a Unstaged
                        git commit -am “Nombre del commit” #Es un commit con el add automatico de todos los files
                        git branch <nombre de la rama> # esto es solo la creacion de la rama sobre la que esta situada es decir el master
                        git merge <rama a unir con la actual>
                        git branch --merged: indica que ramas se han fusionado
                        git fetch : Trae los cambios de un repositorio remotod al local
                        git pull : git fetch + git merge

Git reset y git rm son comandos con utilidades muy diferentes, pero aún así se confunden muy fácilmente.
                    git rm
                    Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.
                    Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:
                    git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
                    git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
                    git reset
                    Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.                    
                    Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:                    
                    Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.                    
                    git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
                    git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.                    ¡Pero todavía falta algo!
                    git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
                    ¿Por que esto es importante?
                    Imagina el siguiente caso:                     
                    Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios se mueven al área de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo pero ese cambio no debe ir en el próximo commit por ahora.                    
                    ¿Qué podemos hacer?                    
                    Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.                    
                    ¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.                    
                    En cambio, si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo (no con sus últimos cambios pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.
                    Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.
                </p>